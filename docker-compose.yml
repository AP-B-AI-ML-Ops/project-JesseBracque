services:
  # PostgreSQL database for our services
  backend-database:
    build:
      context: ./backend-database
    restart: unless-stopped
    volumes:
      - postgres-data:/var/lib/postgresql/data
    env_file:
      - ./backend-database/.env

  # MLFlow server for experiment tracking (uses the database)
  experiment-tracking:
    build: ./backend-service-experiment-tracking
    ports:
      - 5000:5000
    depends_on:
      - backend-database
    volumes:
      - mlflow-artifacts:/mlruns
    environment:
      - MLFLOW_TRACKING_URI=http://experiment-tracking:5000

  train-dev:
    #might need to add extra dockerfile => look lab 9 compose
    build: ./train-dev
    # image: mcr.microsoft.com/devcontainers/python:1-3.12-bullseye
    volumes:
      - .:/workspace:cached
      - mlflow-artifacts:/mlruns
    depends_on:
      - experiment-tracking
      - orchestration

  # prefect server
  orchestration:
    build: ./backend-service-orchestration
    ports:
      - 4200:4200
    environment:
      PREFECT_API_DATABASE_CONNECTION_URL: postgresql+asyncpg://postgres:password@backend-database:5432/prefect_db #needed for connection

  #API service for frontend
  frontend-api:
    image: mcr.microsoft.com/devcontainers/python:1-3.12-bullseye
    volumes:
      - .:/workspace:cached
    command: sleep infinity

  # batch service for data processing => TO BE ADDED
  batch-dev:
    build: ./batch-dev
    volumes:
      - ./batch-dev:/app
      - ./monitoring-reporting:/app/monitoring_reporting
      - ./train-dev/output/dv.pkl:/app/dv.pkl
      - ./train-dev/data-files:/app/data-files
      - mlflow-artifacts:/mlruns
    depends_on:
      - orchestration
      - backend-database

  web-api-dev:
    build: ./web-api-dev
    ports:
      - "9696:9696"
    depends_on:
      - experiment-tracking
    volumes:
      - ./web-api-dev:/app
      - mlflow-artifacts:/mlruns
      - ./train-dev/output/dv.pkl:/app/dv.pkl

  # default login: admin/admin
  #grafana:
  #  image: grafana/grafana
  #  restart: unless-stopped
  #  volumes:
  #    - grafana-data-config-datasources:/etc/grafana/provisioning/datasources:ro
  #    - grafana-data-config-dashboards:/etc/grafana/provisioning/dashboards:ro
  #    - grafana-data-dashboards:/opt/grafana/dashboards
  #    - batch-data:/batch-data
  #  ports:
  #    - "3400:3000"
  #  networks:
  #    - mlops-network

volumes:
  # storage for persistent database usage
  postgres-data:
  # storage for batch-data
  batch-data:
  # MLflow artifacts storage
  mlflow-artifacts:
  # grafana volumes for persistent configuration and datastorage
  grafana-data-config-datasources:
  grafana-data-config-dashboards:
  grafana-data-dashboards:
